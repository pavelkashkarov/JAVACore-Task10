/**
 * Класс JvmComprehension загружается через ClassLoaders (подсистема загрузчиков классов),
 * где данный класс ищется по очереди на 3-х уровнях: bootstrap, platform, application.
 *
 * Если класс найден на каком-то из уровней, то происходит его загрузка,
 * также предварительно осуществляется проверка на валидность кода,
 * подготовка примитивов, статических полей, и, если есть, связывание ссылок на другие классы.
 *
 * Данные об этом классе перемещаются для хранения в metaspace.
 *
 * Код программы выполняется строка за строкой, каждый метод компилируется по очереди в машинный код.
 * Интерпритатор интерпретирует машинный код также строка за строкой, затем выполняет.
 *
 * Периодически сборщик мусора собирает уже не используемые объекты из памяти путем обхода графа достижимых объектов.
 * При сборке мусора, обычно, приостанавливается работа всей программы.
 */
public class JvmComprehension {

    /**
     * В стеке создается фрейм для метода main()
     */
    public static void main(String[] args) {

        /*
         * Во фрейм метода main создается и помещается переменная i.
         * Значение переменной i равняется 1.
         */
        int i = 1; // 1

        /*
         * В куче создается экземпляр класса Object, во фрейм метода main() помещается ссылка на него.
         * Экземпляр класса хранится в heap.
         */
        Object o = new Object(); // 2

        /*
         * В куче создается экземпляр класса Integer, во фрейм метода main() помещается ссылка на него.
         * Экземпляр класса со значением 2 хранится в heap.
         */
        Integer ii = 2; // 3

        /*
         * Для метода printAll() создается фрэйм в стэке, в который помещается i = 1,
         * а так же ссылки на экземпляры o и ii.
         */
        printAll(o, i, ii); // 4

        /*
         * Строка "finished" помещается в кучу.
         * Создается новый фрейм для метода println(), в него помещается строка.
         * После извлечения строки из фрейма, фрейм метода main() удаляется из стека.
         */
        System.out.println("finished"); // 7
    }

    private static void printAll(Object o, int i, Integer ii) {

        /*
         * Создается экземпляр класса Integer, во фрейм метода printAll() помещается ссылка на него.
         * Экземпляр класса со значением 700 хранится в heap.
         */
        Integer uselessVar = 700; // 5

        /*
         * Результат выражения (o.toString() + i + ii) помещается в кучу.
         * Создается новый фрейм для метода println(), в него помещается результат выражения.
         */
        System.out.println(o.toString() + i + ii);  // 6
    }
}
